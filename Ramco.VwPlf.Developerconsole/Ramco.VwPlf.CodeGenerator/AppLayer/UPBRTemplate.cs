// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Ramco.VwPlf.CodeGenerator.AppLayer
{
    using System.Linq;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\Workings\DotnetGenerator_Latest_bpdtpfr\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\UPBRTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class UPBRTemplate : UPBRTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Syste" +
                    "m.Text;\r\nusing System.Collections.Specialized;\r\nusing com.ramco.vw.tp;\r\nusing Sy" +
                    "stem.Xml;\r\n\r\nnamespace com.ramco.vw.C");
            
            #line 13 "E:\Workings\DotnetGenerator_Latest_bpdtpfr\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\UPBRTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ServiceName));
            
            #line default
            #line hidden
            this.Write(".ml.br\r\n{\r\n    public class C");
            
            #line 15 "E:\Workings\DotnetGenerator_Latest_bpdtpfr\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\UPBRTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ServiceName));
            
            #line default
            #line hidden
            this.Write("_ml_br:CUtil\r\n    {\r\n        public NameValueCollection ProcessUniversalPersonali" +
                    "zation(Dictionary<string,object> personalizationInput)\r\n        {\r\n\r\n           " +
                    " NameValueCollection nvc_InputSegment = personalizationInput[\"inputsegment\"] as " +
                    "NameValueCollection;\r\n            NameValueCollection nvc_OutputSegment = person" +
                    "alizationInput[\"outputsegment\"] as NameValueCollection;\r\n\r\n            nvcFW_CON" +
                    "TEXT = personalizationInput[\"contextparameter\"] as NameValueCollection;\r\n       " +
                    "     string szErrorDesc =string.Empty, szErrSrc=string.Empty;\r\n            strin" +
                    "g szSessionToken = personalizationInput[\"sessiontoken\"] as string;\r\n            " +
                    "long lSPErrorID=0;\r\n            string sValue = string.Empty;\r\n            try\r\n" +
                    "            {\r\n                //********Starting to execute ProcessUniversalPer" +
                    "sonalization ****************\r\n\r\n                Service_Pre_Process(\"\", szSessi" +
                    "onToken, ref szComponentName, ref szServiceName, ref szLangID, ref szCompInst, r" +
                    "ef szOUI, ref szSecToken, ref szUser, ref szConnectionString, ref szTxnID, ref s" +
                    "zRole);\r\n\r\n                try\r\n                {\r\n                    CreateCom" +
                    "mand();\r\n                    try\r\n                    {\t\t\t\t\t\r\n                  " +
                    "      Parameters(\"@ctxt_OUInstance\", DBType.NVarchar, 4, szOUI);\r\n              " +
                    "          Parameters(\"@ctxt_User\", DBType.NVarchar, 30, szUser);\r\n              " +
                    "          Parameters(\"@ctxt_Language\", DBType.Int, 32, szLangID);\r\n             " +
                    "           Parameters(\"@ctxt_Service\", DBType.NVarchar, 32, szServiceName);\r\n   " +
                    "                     Parameters(\"@CTxt_Role\", DBType.NVarchar, 30, szRole);\r\n\t\t\t" +
                    "\t\t\t");
            
            #line 44 "E:\Workings\DotnetGenerator_Latest_bpdtpfr\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\UPBRTemplate.tt"

						foreach(Parameter p in ps.Methods.First().Parameters.Where(param=>string.Compare("fw_context",param.Seg.Name,true)!=0 && (param.FlowDirection == "0" || param.FlowDirection == "2")))
						{
							string sDBType = string.Empty;
							switch(p.CategorizedDataType.ToUpper())
							{
								case "INT":
									sDBType = "Int";
								break;
								case "STRING":
									sDBType = "NVarchar";
								break;
								case "DOUBLE":
									sDBType = "Numeric";
								break;
								default:
								break;
							}
							WriteLine(CurrentIndent + string.Format("sValue = nvc_InputSegment[\"{0}\"];",p.DI.Name));
							WriteLine(CurrentIndent + string.Format("Parameters(\"@{0}\",DBType.{1},{2},sValue);",p.Name,sDBType,p.Length));
						}
						
            
            #line default
            #line hidden
            this.Write(@"                    }
                    catch (Exception e)
                    {
                        throw new Exception(""General Exception during IN Parameter Binding of ProcessUniversalPersonalization - "" + e.Message);
                    }
                    WriteProfiler(""Executing-- ");
            
            #line 71 "E:\Workings\DotnetGenerator_Latest_bpdtpfr\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\UPBRTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ps.Methods.First().SPName));
            
            #line default
            #line hidden
            this.Write(" sp\");\r\n                    Execute_SP(true, \"");
            
            #line 72 "E:\Workings\DotnetGenerator_Latest_bpdtpfr\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\UPBRTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ps.Methods.First().SPName));
            
            #line default
            #line hidden
            this.Write(@""", ref szErrorDesc, ref lSPErrorID, ref szErrSrc, SP_ERR_PROTOCOL_OUTPARAM);

                    //To handle stop error type / Raise errors
                    if (lSPErrorID != 0)
                    {
                        throw new Exception(szErrorDesc);
                    }


                    try
                    {
                        if (IsDataReader_Accessible() && Read())
                        {
						");
            
            #line 85 "E:\Workings\DotnetGenerator_Latest_bpdtpfr\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\UPBRTemplate.tt"

							foreach(Parameter p in ps.Methods.First().Parameters.Where(param=>string.Compare("fw_context",param.Seg.Name,true)!=0 && (param.FlowDirection == "1" || param.FlowDirection == "2")))
							{
								WriteLine(CurrentIndent + string.Format("sValue = GetValue(\"{0}\");",p.Name));
								WriteLine(CurrentIndent + string.Format("nvc_OutputSegment[\"{0}\"] = sValue;",p.Name));
							}
						
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t}\r\n                    }\r\n                    catch (Exception e)\r\n        " +
                    "            {\r\n                        ");
            
            #line 96 "E:\Workings\DotnetGenerator_Latest_bpdtpfr\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\UPBRTemplate.tt"

						WriteLine(CurrentIndent + string.Format("throw new Exception(\"General Exception during OUT Data Binding of ProcessUniversalPersonalization - {0} BR - {1}\" + e.Message);",ps.SeqNO,ps.Methods.First().SeqNO));
						
            
            #line default
            #line hidden
            this.Write(@"                    }


                    //To handle continue error type / Non-Raise errors
                    if (lSPErrorID == 0)
                    {
                        if (GetCommandOutParam(ref lSPErrorID, SP_ERR_PROTOCOL_OUTPARAM))
                        {
                            if (lSPErrorID != 0)
                            {
								");
            
            #line 109 "E:\Workings\DotnetGenerator_Latest_bpdtpfr\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\UPBRTemplate.tt"

                                WriteLine(CurrentIndent + string.Format("Process_MethodError_Info(\"\", APP_ERROR, lSPErrorID, 1, {0}, {1}, {2});",ps.Methods.First().ID,ps.SeqNO,ps.Methods.First().SeqNO));
								
            
            #line default
            #line hidden
            this.Write(@"                            }
                        }
                    }
                }
                catch (CRVWException rvwe)
                {
                    throw rvwe;
                }
                catch (Exception e)
                {
					");
            
            #line 122 "E:\Workings\DotnetGenerator_Latest_bpdtpfr\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\UPBRTemplate.tt"

                    WriteLine(CurrentIndent +  string.Format("throw new Exception(\"General Exception at ProcessUniversalPersonalization - {0} BR - {1}\" + e.Message);",ps.SeqNO,ps.Methods.First().SeqNO));
					
            
            #line default
            #line hidden
            this.Write(@"                }
                finally
                {
                    CloseCommand();
                    Close();
                }
            }
            catch (CRVWException rvwe)
            {
                throw rvwe;
            }
            catch (Exception e)
            {
                ");
            
            #line 138 "E:\Workings\DotnetGenerator_Latest_bpdtpfr\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\UPBRTemplate.tt"

				WriteLine(CurrentIndent + string.Format("throw new Exception(\"ProcessUniversalPersonalization - {0}\" + e.Message);",ps.SeqNO));
				
            
            #line default
            #line hidden
            this.Write("            }\r\n            return nvc_OutputSegment;\r\n        }\r\n        \r\n    }\r" +
                    "\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 147 "E:\Workings\DotnetGenerator_Latest_bpdtpfr\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\UPBRTemplate.tt"

public string ComponentName	{get;set;}
public string ServiceName	{get;set;}
public ProcessSection ps	{get;set;}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class UPBRTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
