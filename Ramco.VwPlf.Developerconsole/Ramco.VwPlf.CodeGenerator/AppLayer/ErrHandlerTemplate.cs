// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Ramco.VwPlf.CodeGenerator.AppLayer
{
    using System.Data;
    using System.Linq;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\Workings\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\ErrHandlerTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class ErrHandlerTemplate : ErrHandlerTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("/********************************************************************************" +
                    "************************\r\n* Copyright @2004, RAMCO SYSTEMS,  All rights reserved" +
                    ".\r\n* Application/Module Name   :");
            
            #line 7 "E:\Workings\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\ErrHandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sComponentName));
            
            #line default
            #line hidden
            this.Write("_ErrHdlr.cs\r\n* Code Generated on         :");
            
            #line 8 "E:\Workings\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\ErrHandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now));
            
            #line default
            #line hidden
            this.Write("\r\n* Code Generated From       :");
            
            #line 9 "E:\Workings\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\ErrHandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Format("{0}/{1}/{2}/{3}/{4}/{5}/{6}",ecrOptions.Customer, ecrOptions.Project, ecrOptions.Ecrno, ecrOptions.Model, ecrOptions.User, ecrOptions.DB, ecrOptions.CodegenClient)));
            
            #line default
            #line hidden
            this.Write(@"
* Revision/Version #        :
* Purpose                   :Error Handler.
* Modifications             :																														
* Modifier Name & Date      :
********************************************************************************************************/
using System;
using System.Reflection;
using System.Collections;
using System.Resources;
using System.Text;
using System.Text.RegularExpressions;
using System.Diagnostics;
using System.Globalization;
using com.ramco.vw.tp; //Clocalizer
[assembly:AssemblyVersion(""1.4.3.12"")]
namespace com.ramco.vw.");
            
            #line 25 "E:\Workings\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\ErrHandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sComponentName.ToLower()));
            
            #line default
            #line hidden
            this.Write(@".ehs
{
	public class CErrorHandler
	{
		Hashtable TempPHData;
		string[] szErDelimeter = {""$::$""};
		string[] szPhDelimeter = {""#::#""};
		static Regex reBrPlaceHolder;
		static Regex rePlPlaceHolder;
		
		string BRError="""";
		string PSError="""";
		string SPError="""";
		string MError="""";
		string SerError="""";
		string szComponentName=""");
            
            #line 40 "E:\Workings\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\ErrHandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sComponentName));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\tstatic Clocalizer ehsLoc = null;\r\n\t\tstring culture;\r\n\t\tDefaultTraceListener" +
                    " outDBString;\r\n\r\n\t\tpublic CErrorHandler(int langid)\r\n\t\t{\r\n\t\t\tif(ehsLoc == null)\r" +
                    "\n\t\t\t{\r\n\t\t\t\tstring szSatAsm;\r\n\t\t\t\tAssembly exAsm = Assembly.GetExecutingAssembly(" +
                    ");\r\n\t\t\t\tstring szVersion=\"2.0.3.2\";\r\n\t\t\t\tstring szPublicKeyToken=\"3a721247b727f8" +
                    "b9\";\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tszVersion = exAsm.GetName().Version.ToString();\r\n\t\t\t\t" +
                    "\tbyte[] pkt = exAsm.GetName().GetPublicKeyToken();\r\n\t\t\t\t\tszPublicKeyToken = stri" +
                    "ng.Format(\"{0:x2}{1:x2}{2:x2}{3:x2}{4:x2}{5:x2}{6:x2}{7:x2}\", pkt[0], pkt[1], pk" +
                    "t[2], pkt[3], pkt[4], pkt[5], pkt[6], pkt[7]);\r\n\t\t\t\t\tpkt=null;\r\n\t\t\t\t}\r\n\t\t\t\tcatch" +
                    "(Exception ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tszVersion=\"2.0.3.2\";\r\n\t\t\t\t\tszPublicKeyToken=\"3a72124" +
                    "7b727f8b9\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tszSatAsm = string.Format(\"{0}.Res" +
                    "ources, Version={1}, Culture = Neutral, PublicKeyToken={2}\", szComponentName, sz" +
                    "Version, szPublicKeyToken);\r\n\t\t\t\t\tAssembly satasm = Assembly.Load(szSatAsm);\r\n\t\t" +
                    "\t\t\tehsLoc = new Clocalizer(satasm);\r\n\t\t\t\t}\r\n\t\t\t\tcatch(Exception ex)\r\n\t\t\t\t{\r\n\t\t\t\t" +
                    "\tthrow new Exception ( string.Format(\"Problem While Loading Satellite Assembly f" +
                    "or the Component - {0} Exception : {1}\",szComponentName, ex.Message));\r\n\t\t\t\t}\r\n\t" +
                    "\t\t}\r\n\t\t\tif (reBrPlaceHolder == null)\r\n\t\t\treBrPlaceHolder = new Regex(@\"\\<.*?(\\:|" +
                    "\\>)\");\r\n\t\t\tif (rePlPlaceHolder == null)\r\n\t\t\trePlPlaceHolder = new Regex(@\"\\^.*?(" +
                    "\\:|\\!)\");\r\n\r\n\t\t\tculture = \"ehs.\" + langid.ToString();\r\n\t\t}\r\n\r\n\t\tpublic string Ge" +
                    "tResourceInfo(string key)\r\n\t\t{\r\n\t\t\treturn CErrorHandler.ehsLoc.GetResourceInfo(k" +
                    "ey,culture);\r\n\t\t}\r\n\r\n\t\tpublic bool getErrorMessage(string szServiceName, string " +
                    "szPHSeqNo, long lMethodID,long lSPErrorID,long lLoopInst,long PSSeqNo ,long BRSe" +
                    "qNo,ref long lBRErrorID,ref string szErrorMsg,ref string szCorrectiveMsg,ref lon" +
                    "g lSererity,ref string szFocusSegName,ref string szFocusDI,ref Hashtable PHData)" +
                    "\r\n\t\t{\r\n\t\t\tstring[] szTemp; // Used for Spliting string Variable with Error Delim" +
                    "eter\r\n\t\t\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tszErrorMsg = CErrorHandler.ehsLoc.GetResourceInfo(st" +
                    "ring.Format(\"m{0}e{1}\",lMethodID.ToString().Trim(), lSPErrorID.ToString().Trim()" +
                    "), culture);\r\n\t\t\t\tszCorrectiveMsg = CErrorHandler.ehsLoc.GetResourceInfo(string." +
                    "Format(\"m{0}c{1}\",lMethodID.ToString().Trim(), lSPErrorID.ToString().Trim()), cu" +
                    "lture);\r\n\t\t\t\tszTemp = szCorrectiveMsg.Split(szErDelimeter ,StringSplitOptions.No" +
                    "ne);\r\n\t\t\r\n\t\t\t\tif(szTemp.Length > 2)\r\n\t\t\t\t{\r\n\t\t\t\t\tszCorrectiveMsg = szTemp[0];\r\n\t" +
                    "\t\t\t\tlong.TryParse(szTemp[1], out lBRErrorID);\r\n\t\t\t\t\tlong.TryParse(szTemp[2], out" +
                    " lSererity);\r\n\t\t\t\t\tif(szTemp.Length > 3)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tszFocusSegName   = szTem" +
                    "p[3];\r\n\t\t\t\t\t\tif(szTemp.Length > 4)\r\n\t\t\t\t\t\t\tszFocusDI    = szTemp[4];\r\n\t\t\t\t\t}\r\n\t\t" +
                    "\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tthrow new Exception (\"Error Key Missing\");\r\n\t\t\t\t}\r\n\t\t" +
                    "\t}\r\n\t\t\tcatch(Exception ex)\r\n\t\t\t{\r\n\t\t\t\tSPError = CErrorHandler.ehsLoc.GetResource" +
                    "Info(\"sperror\",culture);\r\n\t\t\t\tthrow new Exception (string.Format(SPError,lSPErro" +
                    "rID.ToString(),lMethodID.ToString(),szServiceName));\r\n\t\t\t}\r\n\t\t\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t" +
                    "\t\tMatchCollection mcPHCollection = reBrPlaceHolder.Matches(szErrorMsg);\r\n\t\t\r\n\t\t\t" +
                    "\tif (mcPHCollection.Count > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tstring szPHKey;\r\n\t\t\t\t\tstring szTempP" +
                    "HInfo;\r\n\t\t\t\t\tstring[] szPHInfo;\r\n\t\t\r\n\t\t\t\t\tint iPHCount=1;\r\n\t\t\t\t\tstring sbPHKey =" +
                    " string.Format(\"i{0}m{1}ps{2}b{3}s{4}\",lSPErrorID.ToString(), lMethodID.ToString" +
                    "(), PSSeqNo.ToString(), BRSeqNo.ToString(), szServiceName);\r\n\t\t\r\n\t\t\t\t\tszTempPHIn" +
                    "fo = CErrorHandler.ehsLoc.GetResourceInfo(sbPHKey.ToString(), \"ehs.phinfo\" + szP" +
                    "HSeqNo.Trim());\r\n\t\t\t\t\tforeach (Match mPHName in mcPHCollection)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ts" +
                    "zPHKey = mPHName.Value;\r\n\t\t\t\t\t\tszPHKey = szPHKey.Substring(1,szPHKey.Length-2);\r" +
                    "\n\t\t\t\t\t\tszTemp = null;\r\n\t\t\r\n\t\t\t\t\t\tszPHInfo = szTempPHInfo.Split(szPhDelimeter,Str" +
                    "ingSplitOptions.None);\r\n\t\t\t\t\t\tfor(int j=0;j<=szPHInfo.Length-1;j++)\r\n\t\t\t\t\t\t{\r\n\t\t" +
                    "\t\t\t\t\tszTemp = szPHInfo[j].Split(szErDelimeter,StringSplitOptions.None);\r\n\t\t\t\t\t\t\t" +
                    "if( szTemp.Length> 2)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif (szTemp[0].ToLower() == szPHKey.ToLo" +
                    "wer()) // Place Holder order Must Match with the information given in the phinfo" +
                    "                                                                                " +
                    "           \r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\tszTemp = null;\r\n\t\t\t\t\t\t\t}\r\n\t\t" +
                    "\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\tif( szTemp == null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\toutDBString = new DefaultT" +
                    "raceListener();\r\n\t\t\t\t\t\t\toutDBString.WriteLine(\"Place Holder Name From MatchColle" +
                    "ction   :\" + szPHKey);\r\n\t\t\t\t\t\t\toutDBString.WriteLine(\"Place Holder Name From PHI" +
                    "nfo Collection :\" + szTemp[0]);\r\n\t\t\t\t\t\t\toutDBString.WriteLine(\"Place Holder Inde" +
                    "x           :\" + iPHCount.ToString());\r\n\t\t\t\t\t\t\toutDBString =null;\r\n\t\t\t\t\t\t\tsbPHKe" +
                    "y = null;\r\n\t\t\t\t\t\t\tszTemp = null;\r\n\t\t\t\t\t\t\tszPHInfo=null;\r\n\t\t\t\t\t\t\tmcPHCollection =" +
                    " null;\r\n\t\t\t\t\t\t\tthrow new Exception (\"Place Holder info missing\");\r\n\t\t\t\t\t\t}\r\n\t\t\r\n" +
                    "\t\t\t\t\t\tTempPHData=new Hashtable();\r\n\t\t\t\t\t\tTempPHData[\"PlaceHolder\"]= szTemp[0];\r\n" +
                    "\t\t\t\t\t\tTempPHData[\"SegName\"] = szTemp[1];\r\n\t\t\t\t\t\tTempPHData[\"DIName\"] = szTemp[2]" +
                    ";\r\n\t\t\t\t\t\tif(szTemp.Length > 3)\r\n\t\t\t\t\t\tTempPHData[\"DIValue\"] = szTemp[3];\r\n\t\t\t\t\t\t" +
                    "TempPHData[\"InstanceNo\"]=lLoopInst;\r\n\t\t\t\t\t\tPHData[iPHCount]=TempPHData;\r\n\t\t\t\t\t\tT" +
                    "empPHData=null;\r\n\t\t\t\t\t\tiPHCount++;\r\n\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\tsbPHKey = null;\r\n\t\t\t\t\tszTem" +
                    "p = null;\r\n\t\t\t\t\tszPHInfo=null;\r\n\t\t\t\t\tmcPHCollection = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcat" +
                    "ch(Exception ex)\r\n\t\t\t{\r\n\t\t\t\tBRError = CErrorHandler.ehsLoc.GetResourceInfo(\"brer" +
                    "ror\",culture);\r\n\t\t\t\tthrow new Exception(string.Format(BRError,BRSeqNo.ToString()" +
                    ",PSSeqNo.ToString(),lSPErrorID.ToString(),lMethodID.ToString(),szServiceName));\r" +
                    "\n\t\t\t}\r\n\t\treturn true;\r\n\t\t}\r\n\t\t");
            
            #line 195 "E:\Workings\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\ErrHandlerTemplate.tt"
foreach(string servicename in ServiceWithoutError)
		{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\r\n\t\tpublic bool EHS");
            
            #line 197 "E:\Workings\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\ErrHandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(servicename.ToLower()));
            
            #line default
            #line hidden
            this.Write(@"(long lMethodID,long lSPErrorID,long lLoopInst,long PSSeqNo ,long BRSeqNo,ref long lBRErrorID,ref string szErrorMsg,ref string szCorrectiveMsg,ref long lSererity,ref string szFocusSegName,ref string szFocusDI,ref Hashtable PHData)
		{
			SerError = CErrorHandler.ehsLoc.GetResourceInfo(""sererror"",culture);
			throw new Exception(String.Format(SerError, """);
            
            #line 200 "E:\Workings\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\ErrHandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(servicename));
            
            #line default
            #line hidden
            this.Write("\"));\r\n\t\t}\r\n\t\t");
            
            #line 202 "E:\Workings\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\ErrHandlerTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 203 "E:\Workings\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\ErrHandlerTemplate.tt"
foreach(string servicename in ServiceWithError)
		{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\r\n\t\tpublic bool EHS");
            
            #line 205 "E:\Workings\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\ErrHandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(servicename.ToLower()));
            
            #line default
            #line hidden
            this.Write(@"(long lMethodID,long lSPErrorID,long lLoopInst,long PSSeqNo ,long BRSeqNo,ref long lBRErrorID,ref string szErrorMsg,ref string szCorrectiveMsg,ref long lSererity,ref string szFocusSegName,ref string szFocusDI,ref Hashtable PHData)
		{
			bool bRetVal;
			bRetVal = getErrorMessage(""");
            
            #line 208 "E:\Workings\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\ErrHandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(servicename.ToLower()));
            
            #line default
            #line hidden
            this.Write("\", \"1\" , lMethodID, lSPErrorID, lLoopInst, PSSeqNo , BRSeqNo,ref lBRErrorID,ref s" +
                    "zErrorMsg,ref szCorrectiveMsg,ref lSererity,ref szFocusSegName,ref szFocusDI,ref" +
                    " PHData);\r\n\t\t\treturn bRetVal;\r\n\t\t}\r\n\t\t");
            
            #line 211 "E:\Workings\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\ErrHandlerTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
		public bool ReplaceErrMsg(Hashtable PlaceHolder,ref string szErrormsg)
		{
			string szTemp=szErrormsg;
			try
			{
				for (int i=1;i<=PlaceHolder.Count;i++)
				{
					TempPHData=null;
					TempPHData=(Hashtable) PlaceHolder[i];
					if(TempPHData[""DIValue""] != null)
					{
						szTemp=szTemp.Replace((""<"" + TempPHData[""PlaceHolder""].ToString().ToLower() + "">""),TempPHData[""DIValue""].ToString());
					}
					else
					{
						szTemp=szTemp.Replace((""<"" + TempPHData[""PlaceHolder""].ToString().ToLower() + "">""),"" "");
					}
				}
			}
			catch(Exception e)
			{
				throw new Exception(e.Message);
			}
			szErrormsg=szTemp;
			return true;
		}

		private bool GetErrorInfoInternal(long errorId, ref string errorMsg, ref string correctiveAction, params object [] reservedParams )
		{
			try
			{
				errorMsg = CErrorHandler.ehsLoc.GetResourceInfo(""e"" + errorId.ToString(), culture);
				correctiveAction = CErrorHandler.ehsLoc.GetResourceInfo(""c"" + errorId.ToString(), culture);
				return true;
			}
			catch (Exception)
			{
				return false;
			}
		}
	}	
}

");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 256 "E:\Workings\__Ramco.VwPlf.Developerconsole\Ramco.VwPlf.CodeGenerator\AppLayer\ErrHandlerTemplate.tt"

	public string sComponentName{get;set;}
	public IEnumerable<string> ServiceWithError = null;
    public IEnumerable<string> ServiceWithoutError = null;
	public ECRLevelOptions ecrOptions{get;set;}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class ErrHandlerTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
